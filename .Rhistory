names(data_mt) <- c("x_origin", "y_origin", "x_end", "y_end")
plot<- ggplot()+geom_segment(data_mt, mapping=aes(x=x_origin,y=y_origin,xend=x_end,yend=y_end), colour="grey")+
geom_point(df, aes(x,y), fill="black")
plot
}
#  plot_line<-ggplot(geom_segment_df)+
#   geom_segment(geom_segment_df,
#               aes(x=x_end,y=y_end,xend=x_end, yend=y_end ))
#geom_abline(slope=object$beta_1, intercept=object$beta_0)+
#geom_point(aes(x,y))
# plot_line
#plot(theilsen(x,y))
plot(theilsen(mammals$body,mammals$brain))
plot.theilsen<-function(object){
df <- as.data.frame(cbind(object$x,object$y))
colnames(df)<-c("x","y")
print(df)
data_mt <- matrix(nrow=0,ncol=4)
for (i in 1:(length(df$x)-1)){
for (j in (i+1):length(df$x)){
x_origin = df$x[i]
x_end = df$x[j]
y_origin = df$y[i]
y_end = df$y[j]
data_mt <- rbind(data_mt, c(x_origin, y_origin, x_end, y_end))
}
}
data_mt <- as.data.frame(data_mt)
names(data_mt) <- c("x_origin", "y_origin", "x_end", "y_end")
plot<- ggplot()+geom_segment(data_mt, mapping=aes(x=x_origin,y=y_origin,xend=x_end,yend=y_end), colour="grey")+
geom_point(df, mapping=aes(x,y), fill="black")
plot
}
#  plot_line<-ggplot(geom_segment_df)+
#   geom_segment(geom_segment_df,
#               aes(x=x_end,y=y_end,xend=x_end, yend=y_end ))
#geom_abline(slope=object$beta_1, intercept=object$beta_0)+
#geom_point(aes(x,y))
# plot_line
#plot(theilsen(x,y))
plot(theilsen(mammals$body,mammals$brain))
plot.theilsen<-function(object){
df <- as.data.frame(cbind(object$x,object$y))
colnames(df)<-c("x","y")
print(df)
data_mt <- matrix(nrow=0,ncol=4)
for (i in 1:(length(df$x)-1)){
for (j in (i+1):length(df$x)){
x_origin = df$x[i]
x_end = df$x[j]
y_origin = df$y[i]
y_end = df$y[j]
data_mt <- rbind(data_mt, c(x_origin, y_origin, x_end, y_end))
}
}
data_mt <- as.data.frame(data_mt)
names(data_mt) <- c("x_origin", "y_origin", "x_end", "y_end")
plot<- ggplot()+geom_segment(data_mt, mapping=aes(x=x_origin,y=y_origin,xend=x_end,yend=y_end), colour="grey")+
geom_point(df, mapping=aes(x,y), fill="black")+
geom_abline(df, mapping=aes(x,y,slope=object$beta_1, intercept=object$beta_0))
plot
}
#  plot_line<-ggplot(geom_segment_df)+
#   geom_segment(geom_segment_df,
#               aes(x=x_end,y=y_end,xend=x_end, yend=y_end ))
#geom_abline(slope=object$beta_1, intercept=object$beta_0)+
#geom_point(aes(x,y))
# plot_line
#plot(theilsen(x,y))
plot(theilsen(mammals$body,mammals$brain))
mammals
# b
mammals <- subset(mammals, body<=80)
theilsen(mammals$body, mammals$brain)
#c
plot.theilsen<-function(object){
df <- as.data.frame(cbind(object$x,object$y))
colnames(df)<-c("x","y")
print(df)
data_mt <- matrix(nrow=0,ncol=4)
for (i in 1:(length(df$x)-1)){
for (j in (i+1):length(df$x)){
x_origin = df$x[i]
x_end = df$x[j]
y_origin = df$y[i]
y_end = df$y[j]
data_mt <- rbind(data_mt, c(x_origin, y_origin, x_end, y_end))
}
}
data_mt <- as.data.frame(data_mt)
names(data_mt) <- c("x_origin", "y_origin", "x_end", "y_end")
plot<- ggplot()+geom_segment(data_mt, mapping=aes(x=x_origin,y=y_origin,xend=x_end,yend=y_end), colour="grey")+
geom_point(df, mapping=aes(x,y), fill="black")+
geom_abline(df, mapping=aes(x,y,slope=object$beta_1, intercept=object$beta_0))
plot
}
#  plot_line<-ggplot(geom_segment_df)+
#   geom_segment(geom_segment_df,
#               aes(x=x_end,y=y_end,xend=x_end, yend=y_end ))
#geom_abline(slope=object$beta_1, intercept=object$beta_0)+
#geom_point(aes(x,y))
# plot_line
#plot(theilsen(x,y))
plot(theilsen(mammals$body,mammals$brain))
library(dplyr)
library(MASS)
library(ggplot2)
library(matlib)
data(mammals)
load(url("http://www.stats.gla.ac.uk/~levers/rp/a3.RData"))
## Task 1 - A
box.cox <- function(y, lambda=0){
for (i in seq_along(y)){
if (lambda!=0){
y[i] <-((y[i]^lambda-1)/lambda)
}
else{
y[i]<-log(y[i])
print(i)
}
}
return(y)
}
## Task 1 - B
lambda_i <- box.cox(mammals$brain) # lambda = 0
lambda_ii<-box.cox(mammals$brain, 0.1) #lambda = 0.1
## Task 2
# y(ij) = average distance
# i = headgear
# j = vehicle type
# (a)
mean_anova <- function(y){
constant <- 1/(nrow(y)*ncol(y))
return(constant*sum(y))
}
mean_anova(bicycle) #1.241127
## function to compute headgear effect
headgear_effect <-function(y){
row_sum <- apply(y,1,sum)/ncol(y)## sum of col
miu <-mean_anova(y)
return(row_sum-miu)
}
headgear_effect(bicycle)
vehicle_effect <-function(y){
col_sum <- apply(y,2,sum)/nrow(y)## sum of col
miu <-mean_anova(y)
return(col_sum-miu)
}
vehicle_effect(bicycle)
## (b)
residuals_matrix <- function(y){
mean <- mean_anova(y)
headgear<-sweep(y,1,headgear_effect(y))
vehicle <-sweep(y,2,vehicle_effect(y))
return(y-mean-headgear-vehicle)
}
residuals_matrix(bicycle)
# Residual sum of squares
rss <- function(y){
return(sum(residuals_matrix(y)))
}
residual_ss <- rss(bicycle) # -34.75
## (c) Test statistics
f_test_alpha <- function(y){
ss <- ncol(y)*sum(headgear_effect(y)^2)
numerator<- ss/(nrow(y)-1)
denominator<-rss(y)/((nrow(y)-1)*(ncol(y)-1))
return(numerator/denominator)
}
f_test_alpha(bicycle)  #-0.004911628
## the corresponding critical value is lower than critical valuye of 5.9874.
f_test_beta <- function(y){
ss <- nrow(y)*sum(vehicle_effect(y)^2)
numerator<- ss/(ncol(y)-1)
denominator<-rss(y)/((nrow(y)-1)*(ncol(y)-1))
return(numerator/denominator)
}
f_test_beta(bicycle) ## -.003474
# (d)  convert into data frame bicyle long
bicycle.long <- data.frame(matrix(ncol = 3, nrow = 0))
col_names <- c("headgear", "vehicle", "distance")
colnames(bicycle.long)<-col_names
for (i in seq_along(colnames(y))){
for (j in seq_along(rownames(y))){
new_row<-c(rownames(y)[j],colnames(y)[i],y[j,i])
bicycle.long[nrow(bicycle.long) + 1,] = new_row
}
}
bicycle.long
#Task 3
#(a)
kernel.matrix<-function(x,p){
k<-matrix(nrow=length(x),ncol=length(x))
for (i in seq_along(x)){
for (j in seq_along(x)){
numerator <-(x[i]-x[j])^2
denominator <- (p^2)
k[i,j]<-exp(-numerator/denominator)
}
}
return(k)
}
#(b)
krr.fit<- function(K,y,lambda){
I <- diag(nrow(K)) ## k is symetric matrix
inverse_matrix <- solve(K+(lambda*I))
y_hat <- (K%*%inverse_matrix)%*%y
return(y_hat)
}
krr.fit(k,y,10)
#(c)
krr<- function(x,y,p=sd(x),lambda=(10^(-3))){
if (length(x)==length(y)){
K <- kernel.matrix(x,p)
krrfit <- krr.fit(K,y,lambda)
return(list(K,krrfit))
}
else{
stop("x and y are not of the same length")
}
}
#(d)
#Plot the data
mcycle_plot <- ggplot(mcycle)+geom_point(aes(x=times,y=accel))
# Fitted function
mcycle_krr <- krr(mcycle$times,mcycle$accel)
# add fitted function to the first graph
mcycle_new_df <- cbind(mcycle,mcycle_krr[2])
names(mcycle_new_df)[3]<-"fitted_values"
final_plot <- ggplot(mcycle_new_df, aes(x=times, y=fitted_values))+
geom_line(aes(x=times, y=fitted_values))+
geom_point(aes(x=times,y=accel))+
labs(x = "Times", y="Accel")
print(final_plot)
### Task 4
#(a)
theilsen <- function(x,y){
## part a.1
s<-c()
for (i in 1:(length(x)-1)){
for (j in (i+1):length(x)){
s[length(s)+1]<-(-y[j]-y[i])/(x[j]-x[i])
}
}
beta_1 <- median(s)
## part (a.2)
t<-c()
for (i in 1:length(x)){
t[length(t)+1] <-y[i] - (beta_1*x[i])
}
beta_0 <-median(t)
object<-list(beta_0=beta_0,beta_1=beta_1,x=x, y=y)
class(object) <- "theilsen"
object
}
# b
mammals <- subset(mammals, body<=80)
theilsen(mammals$body, mammals$brain)
#c
# b
mammals <- subset(mammals, body<=80)
theilsen(mammals$body, mammals$brain)
#c
plot.theilsen<-function(object){
df <- as.data.frame(cbind(object$x,object$y))
colnames(df)<-c("x","y")
print(df)
data_mt <- matrix(nrow=0,ncol=4)
for (i in 1:(length(df$x)-1)){
for (j in (i+1):length(df$x)){
x_origin = df$x[i]
x_end = df$x[j]
y_origin = df$y[i]
y_end = df$y[j]
data_mt <- rbind(data_mt, c(x_origin, y_origin, x_end, y_end))
}
}
data_mt <- as.data.frame(data_mt)
names(data_mt) <- c("x_origin", "y_origin", "x_end", "y_end")
plot<- ggplot()+geom_segment(data_mt, mapping=aes(x=x_origin,y=y_origin,xend=x_end,yend=y_end), colour="grey")+
geom_point(df, mapping=aes(x,y), fill="black")+
geom_abline(df, mapping=aes(x,y,slope=object$beta_1, intercept=object$beta_0))+
labs(x = "body", y="brain")
plot
}
plot(theilsen(mammals$body,mammals$brain))
predict.theilsen<-function(object){
predict <- c()
for (i in x){
y_predict <- object$beta_0 + (object$beta_1)(object$x)
predict <- predict[length(predict)+1]<-y_predict
predict
}
}
predicit(theilsen(mammals$body,mammals$brain))
predict.theilsen<-function(object){
predict <- c()
for (i in x){
y_predict <- object$beta_0 + (object$beta_1)(object$x)
predict <- predict[length(predict)+1]<-y_predict
predict
}
}
predict(theilsen(mammals$body,mammals$brain))
predict.theilsen<-function(object){
predict <- c()
for (i in x){
y_predict <- object$beta_0 + (object$beta_1)(object$x[i])
predict <- predict[length(predict)+1]<-y_predict
predict
}
}
predict(theilsen(mammals$body,mammals$brain))
predict.theilsen<-function(object){
print(object$x)
predict <- c()
for (i in x){
y_predict <- object$beta_0 + (object$beta_1)(object$x[i])
predict <- predict[length(predict)+1]<-y_predict
predict
}
}
predict(theilsen(mammals$body,mammals$brain))
predict.theilsen<-function(object){
predict <- c()
for (i in object$x){
print(i)
y_predict <- object$beta_0 + (object$beta_1)(object$x[i])
predict <- predict[length(predict)+1]<-y_predict
predict
}
}
predict(theilsen(mammals$body,mammals$brain))
predict.theilsen<-function(object){
predict <- c()
for (i in object$x){
print(i)
y_predict <- object$beta_0 + (object$beta_1)(object$x[i])
predict[length(predict)+1]<-y_predict
y_predict
}
predict
}
predict(theilsen(mammals$body,mammals$brain))
predict.theilsen<-function(object){
predict <- c()
for (i in object$x){
print(i)
y_predict <- object$beta_0 + (object$beta_1)(i)
predict[length(predict)+1]<-y_predict
y_predict
}
predict
}
predict(theilsen(mammals$body,mammals$brain))
predict.theilsen<-function(object){
predict <- c()
for (i in object$x){
print(i)
y_predict <- object$beta_0 + (object$beta_1)*(i)
predict[length(predict)+1]<-y_predict
y_predict
}
predict
}
predict(theilsen(mammals$body,mammals$brain))
predict.theilsen<-function(object){
predict <- c()
for (i in object$x){
y_predict <- object$beta_0 + (object$beta_1)*(i)
predict[length(predict)+1]<-y_predict
y_predict
}
predict
}
predict(theilsen(mammals$body,mammals$brain))
predict(theilsen(mammals$body,mammals$brain))
predict.theilsen<-function(object, newdata){
if (missing(newdata))
newdata <- object$x  ## if new data is not provided
predict <- c()
for (i in object$x){
y_predict <- object$beta_0 + (object$beta_1)*(i)
predict[length(predict)+1]<-y_predict
y_predict
}
predict
}
predict(theilsen(mammals$body,mammals$brain))
warnings()
mean_anova <- function(y){
constant <- 1/(nrow(y)*ncol(y))
return(constant*sum(y))
}
mean_anova(bicycle) #1.241127
## function to compute headgear effect
headgear_effect <-function(y){
row_sum <- apply(y,1,sum)/ncol(y)## sum of col
miu <-mean_anova(y)
return(row_sum-miu)
}
headgear_effect(bicycle)
vehicle_effect <-function(y){
col_sum <- apply(y,2,sum)/nrow(y)## sum of col
miu <-mean_anova(y)
return(col_sum-miu)
}
vehicle_effect(bicycle)
## (b)
residuals_matrix <- function(y){
mean <- mean_anova(y)
headgear<-sweep(y,1,headgear_effect(y))
vehicle <-sweep(y,2,vehicle_effect(y))
return(y-mean-headgear-vehicle)
}
residuals_matrix(bicycle)
# Residual sum of squares
rss <- function(y){
return(sum(residuals_matrix(y)))
}
residual_ss <- rss(bicycle) # -34.75
## (c) Test statistics
f_test_alpha <- function(y){
ss <- ncol(y)*sum(headgear_effect(y)^2)
numerator<- ss/(nrow(y)-1)
denominator<-rss(y)/((nrow(y)-1)*(ncol(y)-1))
return(numerator/denominator)
}
f_test_alpha(bicycle)  #-0.004911628
## the corresponding critical value is lower than critical valuye of 5.9874.
f_test_beta <- function(y){
ss <- nrow(y)*sum(vehicle_effect(y)^2)
numerator<- ss/(ncol(y)-1)
denominator<-rss(y)/((nrow(y)-1)*(ncol(y)-1))
return(numerator/denominator)
}
f_test_beta(bicycle) ## -.003474
# (d)  convert into data frame bicyle long
bicycle.long <- data.frame(matrix(ncol = 3, nrow = 0))
col_names <- c("headgear", "vehicle", "distance")
colnames(bicycle.long)<-col_names
for (i in seq_along(colnames(y))){
for (j in seq_along(rownames(y))){
new_row<-c(rownames(y)[j],colnames(y)[i],y[j,i])
bicycle.long[nrow(bicycle.long) + 1,] = new_row
}
}
bicycle.long
#Task 3
#(a)
mean_anova <- function(y){
constant <- 1/(nrow(y)*ncol(y))
return(constant*sum(y))
}
mean_anova(bicycle) #1.241127
anova(lm(distance~headgear+vehicle, data=bicycle.long))
bicycle.long <- data.frame(matrix(ncol = 3, nrow = 0))
col_names <- c("headgear", "vehicle", "distance")
colnames(bicycle.long)<-col_names
for (i in seq_along(colnames(y))){
for (j in seq_along(rownames(y))){
new_row<-c(rownames(y)[j],colnames(y)[i],y[j,i])
bicycle.long[nrow(bicycle.long) + 1,] = new_row
}
}
bicycle.long
anova(lm(distance~headgear+vehicle, data=bicycle.long))
shiny::runApp('Desktop/OneDrive - University of Glasgow/Semester 1/R Programming/R Project/r_shiny_project/R_Project')
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Desktop/OneDrive - University of Glasgow/Semester 1/R Programming/R Project/r_shiny_project")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('R_Project')
setwd("~/Desktop/OneDrive - University of Glasgow/Semester 1/R Programming/R Project/r_shiny_project")
runApp('R_Project')
getwd()
station_names <- read.csv(file="Data/__Stations.csv", header=TRUE, sep=",")
station_names
runApp('R_Project')
runApp('R_Project')
runApp('test')
runApp('R_Project')
runApp('R_Project')
?renderUI
?updateSelectInput
runApp('R_Project')
filelist <- (list.files(path = "R_Project/Data"))[-1]
filelist
pollutant_station
filelist <- (list.files(path = "R_Project/Data"))[-1]
pollutant_station  <- matrix(nrow=0,ncol=2)
for (i in filelist){
pollutant = sub(".csv","", substring(i, first=9))
station = substr(i,start=1, stop=7)
pollutant_station <- rbind(pollutant_station, c(pollutant, station))
}
pollutant_station <- as.data.frame(pollutant_station)
names(pollutant_station) <- c("pollutant", "station_code")
runApp('R_Project')
runApp('R_Project')
runApp('R_Project')
runApp('R_Project')
runApp('R_Project')
runApp('R_Project')
?switch()
runApp('R_Project')
runApp('R_Project')
runApp('R_Project')
?uiOutput
runApp('R_Project')
runApp('R_Project')
runApp('R_Project')
