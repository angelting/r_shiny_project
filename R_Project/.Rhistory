shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?observe
selectInput(inputId="station_names_selector",
#              label = "Choose up to 4 station names: ",
#              choices = station_codes,
#              multiple=TRUE)
#  })
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
station_name <- stations_df %>% filter(EoICode %in% station_codes)%>%select(StationName)
stations_df
stations_df <- read.csv(file="Data/__Stations.csv", header=TRUE, sep=",")
stations_df
runApp()
runApp()
pollutant_station  <- matrix(nrow=0,ncol=2)
for (i in filelist){
pollutant = sub(".csv","", substring(i, first=9))
station = substr(i,start=1, stop=7)
pollutant_station <- rbind(pollutant_station, c(pollutant, station))
}
pollutant_station <- as.data.frame(pollutant_station)
names(pollutant_station) <- c("pollutant", "station_code")
aggregation <- c("Daily Averages",
"Daily Maxima",
"Number of Hours per Day Over Threshold",
"Number of Hours Per Year Over Threshold",
"Number of Days Per Year Over Threshold")
time_axis_choices <- c("Calendar Time", "Day of the Year","Day or Hour of the Week", "Hour of the Day")
runApp()
stations_df %>% filter(EoICode %in% station_codes)%>%select(StationName)
station_codes <- pollutant_station %>% filter(pollutant==pollutant_type) %>%select(station_code)
station_codes
runApp()
station_codes
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(tidyr)
library(dplyr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
