shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?observe
selectInput(inputId="station_names_selector",
#              label = "Choose up to 4 station names: ",
#              choices = station_codes,
#              multiple=TRUE)
#  })
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
station_name <- stations_df %>% filter(EoICode %in% station_codes)%>%select(StationName)
stations_df
stations_df <- read.csv(file="Data/__Stations.csv", header=TRUE, sep=",")
stations_df
runApp()
runApp()
pollutant_station  <- matrix(nrow=0,ncol=2)
for (i in filelist){
pollutant = sub(".csv","", substring(i, first=9))
station = substr(i,start=1, stop=7)
pollutant_station <- rbind(pollutant_station, c(pollutant, station))
}
pollutant_station <- as.data.frame(pollutant_station)
names(pollutant_station) <- c("pollutant", "station_code")
aggregation <- c("Daily Averages",
"Daily Maxima",
"Number of Hours per Day Over Threshold",
"Number of Hours Per Year Over Threshold",
"Number of Days Per Year Over Threshold")
time_axis_choices <- c("Calendar Time", "Day of the Year","Day or Hour of the Week", "Hour of the Day")
runApp()
stations_df %>% filter(EoICode %in% station_codes)%>%select(StationName)
station_codes <- pollutant_station %>% filter(pollutant==pollutant_type) %>%select(station_code)
station_codes
runApp()
station_codes
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(tidyr)
library(dplyr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed commodo consequat mi in fermentum. Phasellus id nisi at nibh sollicitudin volutpat non et massa. Nam nec sapien porttitor, sollicitudin erat vitae, auctor mauris. Nam nisl enim, sagittis vitae semper vitae, suscipit id turpis. Aliquam vel lacinia libero, sit amet dapibus nunc. Nullam vitae bibendum orci. Vestibulum hendrerit maximus volutpat. Nulla a placerat sapien. Integer ullamcorper dapibus magna, eget scelerisque orci consequat quis. Fusce suscipit mi tortor, ultricies faucibus arcu finibus at. Quisque blandit velit in hendrerit pulvinar.
runApp()
runApp()
runApp()
install.packages("rmarkdown")
install.packages("rmarkdown")
shiny::runApp()
runApp()
devtools::install_github('rstudio/rmarkdown')
runApp()
knit_with_parameters('~/Downloads/week11 (1)/example2.Rmd')
install.packages("babynames")
install.packages("babynames")
library(babynames)
library(tidyverse)
# Get the 10 most popular names in the given year for the given gender
top10 <- babynames %>%
filter(sex==params$sex, year==params$year) %>%
group_by(name) %>%
summarize(total = sum(n)) %>%
arrange(desc(total)) %>%
slice(1:10)
if(params$sex=="M") {
boysorgirls <- "boys"
} else {
boysorgirls <- "girls"
}
library(knitr)
top10 %>%
kable()
# extract popularity of those names over the last 50 years
chartdata <- babynames %>%
filter(year>params$year-50, year<=params$year,
sex==params$sex,
name %in% top10$name) %>%
group_by(name, year) %>%
summarize(total = sum(n))
# Prevent ggplot from showing the names in alphabetical order
chartdata <- chartdata %>%
ungroup() %>%
mutate(name=factor(name, levels=top10$name))
# Generate time series plots
ggplot(data=chartdata) +
geom_line(aes(x=year, y=total)) +
facet_wrap(~name)
library(babynames)
library(tidyverse)
# Get the 10 most popular names in the given year for the given gender
top10 <- babynames %>%
filter(sex==params$sex, year==params$year) %>%
group_by(name) %>%
summarize(total = sum(n)) %>%
arrange(desc(total)) %>%
slice(1:10)
if(params$sex=="M") {
boysorgirls <- "boys"
} else {
boysorgirls <- "girls"
}
library(knitr)
top10 %>%
kable()
runApp()
print(df)
#library(babynames)
#library(tidyverse)
# Get the 10 most popular names in the given year for the given gender
#top10 <- babynames %>%
#           filter(sex==params$sex, year==params$year) %>%
#           group_by(name) %>%
#           summarize(total = sum(n)) %>%
#           arrange(desc(total)) %>%
#           slice(1:10)
#if(params$sex=="M") {
#    boysorgirls <- "boys"
#} else {
#    boysorgirls <- "girls"
#}
print(param$df)
print(df)
#library(babynames)
#library(tidyverse)
# Get the 10 most popular names in the given year for the given gender
#top10 <- babynames %>%
#           filter(sex==params$sex, year==params$year) %>%
#           group_by(name) %>%
#           summarize(total = sum(n)) %>%
#           arrange(desc(total)) %>%
#           slice(1:10)
#if(params$sex=="M") {
#    boysorgirls <- "boys"
#} else {
#    boysorgirls <- "girls"
#}
runApp()
runApp()
runApp()
params$tableData
print(1+2)
?colnames
runApp()
shiny::runApp()
library(knitr)
#kable(head(params$tableData), format = "markdown", padding = 0)
kable(data.frame(x=1, y=1) )
runApp()
runApp()
runApp()
library(knitr)
#knitr::kable(params$tableData)
kable(params$tableData)
runApp()
runApp()
